<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Healthy: {{.Name}}</title>
    <!-- CSS only -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.1/css/bootstrap.min.css"
          integrity="sha384-VCmXjywReHh4PwowAiWNagnWcLhlEJLA5buUprzK8rxFgeH0kww/aWY76TfkUoSX" crossorigin="anonymous">
{{range $fileID, $file := .Front.Style.Files}}
    <link rel="stylesheet" href="{{$file}}">
{{end}}
    <style>
        .btn.focus, .btn:focus {
            box-shadow: 0 0 0 0 !important;
        }

        .input-group, .spinner-border {
            margin-left: -1rem;
        }

        .badge-group span:not(:first-child):not(:last-child) {
            border-radius: 0;
        }

        .badge-group span:first-child:not(:last-child) {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }

        .badge-group span:last-child:not(:first-child) {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }

        #counter {
            text-align: center;
        }

        .card-header {
            padding: .25rem 1.25rem;
        }
{{if ne .Front.Style.Content ""}}
        // Custom style
        {{.Front.Style.Content}}
{{end}}
    </style>
</head>
<body>
<div class="container pt-5">
    <div class="row">
        <h1 class="col-md-7" id="title">Healthy: {{.Name}}</h1>
        <div class="col-md-3 h2" id="counter">
            <span class="badge-group">
                <span class="badge badge-success">0</span><span class="badge badge-warning">0</span><span
                        class="badge badge-danger">0</span>
            </span>
        </div>
        <button type="button" class="btn btn-primary col-md-2 h2" id="update_all">Update all</button>
    </div>
    <hr/>
    {{$groups := .Groups}}
    {{range $groupID, $group := $groups.Names}}
        <h2 id="title_{{$groupID}}">
            {{$group}}
            <span class="badge-group" id="counter_{{$groupID}}">
                <span class="badge badge-success">0</span><span class="badge badge-warning">0</span><span
                        class="badge badge-danger">0</span>
            </span>
        </h2>
        <div class="accordion" id="accordion_{{$groupID}}">
            {{$steps := $groups.Get $group}}
            {{range $nameID, $name := $steps.Names}}
                <div class="card" data-group="{{$group}}" data-name="{{$name}}" id="card_{{$groupID}}_{{$nameID}}">
                    <div class="card-header" id="heading_{{$groupID}}_{{$nameID}}">
                        <h3 class="mb-0">
                            <div class="input-group">
                                <button class="btn btn-link btn-block text-left collapsed col-9 col-md-10 to-open"
                                        type="button"
                                        data-toggle="collapse"
                                        data-target="#collapse_{{$groupID}}_{{$nameID}}"
                                        aria-expanded="false"
                                        aria-controls="collapse_{{$groupID}}_{{$nameID}}"
                                        disabled="disabled">
                                    <span class="spinner-border spinner-border-sm d-none" role="status"
                                          aria-hidden="true"></span>{{$name}}
                                </button>

                                <div class="input-group-append col-3 col-md-2 pr-0">
                                    <button class="btn btn-link btn-block update pr-0 pl-0" type="button">Update</button>
                                </div>
                            </div>
                        </h3>
                    </div>
                    <div id="collapse_{{$groupID}}_{{$nameID}}"
                         class="collapse"
                         aria-labelledby="heading_{{$groupID}}_{{$nameID}}"
                         data-parent="#accordion_{{$groupID}}">
                        <div class="card-body">
                            Loading...
                        </div>
                    </div>
                </div>
            {{end}}
        </div>
        <br/>
    {{end}}
</div>
<!-- JS, Popper.js, and jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"
        integrity="sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2"
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
        integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
        crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.1/js/bootstrap.min.js"
        integrity="sha384-XEerZL0cuoUbHE4nZReLT7nx9gQrQreJekYhJD9WNWhH8nEW+0c5qq7aIo2Wl30J"
        crossorigin="anonymous"></script>
{{range $fileID, $file := .Front.Script.Files}}
    <script src="{{$file}}"></script>
{{end}}
<script>
    (function ($) {
        let request_id;

        function get_class(level) {
            if (level === 'error') {
                return 'danger';
            }
            return level;
        }

        function set_loader(card) {
            // card.find('.collapse.show').removeClass('show');
            card.find('.card-header')[0].className = 'card-header';
            card.find('.btn').attr('disabled', 'disabled');
            card.find('.spinner-border').removeClass('d-none');
            card.find('.card-body').text('Loading...');
        }

        function clear_loader(card, message, className) {
            card.find(':disabled').removeAttr('disabled');
            card.find('.card-body').html($('<pre/>').text(message));
            card.find('.card-header')[0].className = className;
            card.find('.spinner-border').addClass('d-none');
        }

        function increment(card, level, size) {
            let parts = card.get(0).id.split('_');
            parts[0] = 'counter';
            parts.pop();
            let group = $('#' + parts.join('_') + ' .badge-' + get_class(level));
            group.text((parseInt(group.text()) || 0) + size);
            parts.pop();
            let title = $('#' + parts.join('_') + ' .badge-' + get_class(level));
            title.text((parseInt(title.text()) || 0) + size);
        }

        function decrement(card) {
            if (card.find('.alert-success').length) {
                increment(card, 'success', -1);
            } else if (card.find('.alert-danger').length) {
                increment(card, 'danger', -1);
            } else if (card.find('.alert-warning').length) {
                increment(card, 'warning', -1);
            }
        }

        function write(card, resp) {
            let message = resp,
                level,
                className = 'card-header ';
            try {
                message = resp.message;
                level = resp.level;
            } catch (e) {
                console.warn(e);
                level = 'error';
                message = message || 'Request failed';
            }

            className += 'alert-' + get_class(level);
            clear_loader(card, message, className);
            increment(card, level, 1);
        }

        function update(card, current, next) {
            let group = card.data('group'),
                name = card.data('name');

            decrement(card);
            clear_loader(card, "Loading...", 'card-header');
            set_loader(card);
            jQuery
                .ajax({
                    type: "POST",
                    url: "validate",
                    data: JSON.stringify({group: group, name: name}),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    timeout: 30000,
                })
                .done((resp) => {
                    // console.log(resp);
                    write(card, resp)
                })
                .fail((data) => {
                    // console.warn(data);
                    if (typeof data === 'object' && data != null) {
                        let keys = ['responseJSON', 'responseText', 'statusText'];
                        for (let i = 0; i < keys.length; i++) {
                            if (data.hasOwnProperty(keys[i]) && data[keys[i]]) {
                                write(card, data[keys[i]]);
                                return;
                            }
                        }
                    }
                    write(card, {
                        message: "Request failed: " + JSON.stringify(data),
                        level: "danger",
                    })
                })
                .always(() => {
                    if (current && current === request_id && next) {
                        next();
                    }
                });
        }

        function update_all() {
            request_id = (new Date()).getTime();
            let cards = $('.card'),
                current = request_id,
                length = cards.length,
                index = -1,
                next = () => {
                    index++
                    if (index < length) {
                        update($(cards.get(index)), current, next)
                    } // else done
                };
            next();
        }

        $('button.update').on("click", function () {
            update($(this).parents('.card'));
        })
        $('#update_all').on("click", update_all);
    })(jQuery)
</script>
{{if ne .Front.Script.Content ""}}
<script>
    // Custom script
    {{.Front.Script.Content}}
</script>
{{end}}
</body>
</html>